name: Restore DB from staging to live

on:
  workflow_call:
    inputs:
      live_directory:
        required: true
        type: string
      staging_directory:
        required: true
        type: string
    secrets:
      SERVER_HOST:
        required: true
      SERVER_USERNAME:
        required: true
      SERVER_PASSWORD:
        required: true


jobs:
  parse_db_conn_staging:
    runs-on: ubuntu-latest
    steps:
      - name: Parse DB Connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ${{ github.event.inputs.staging_directory }}
            php -r "\$c=require 'app/etc/env.php'; 
                     \$d=\$c['db']['connection']['default'];
                     \$envContent = 'STAGING_DB_NAME='.\$d['dbname'].\"\n\".
                                   'STAGING_DB_USER='.\$d['username'].\"\n\".
                                   'STAGING_DB_PASS='.\$d['password'].\"\n\";
                     file_put_contents('/tmp/staging_db_config.env', \$envContent);"

  parse_db_conn_live:
    runs-on: ubuntu-latest
    steps:
      - name: Parse DB Connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ${{ github.event.inputs.live_directory }}
            php -r "\$c=require 'app/etc/env.php'; 
                     \$d=\$c['db']['connection']['default'];
                     \$envContent = 'LIVE_DB_NAME='.\$d['dbname'].\"\n\".
                                   'LIVE_DB_USER='.\$d['username'].\"\n\".
                                   'LIVE_DB_PASS='.\$d['password'].\"\n\";
                     file_put_contents('/tmp/live_db_config.env', \$envContent);"

  create_staging_db_backup:
    runs-on: ubuntu-latest
    needs:
      - parse_db_conn_live
      - parse_db_conn_staging

    steps:
      - name: Create Staging DB backup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            set -a
            source /tmp/staging_db_config.env
            set +a
            cd ${{ github.event.inputs.staging_directory }}
            mysqldump -u${STAGING_DB_USER} -p${STAGING_DB_PASS} ${STAGING_DB_NAME} > currentStagingDBDump.sql
            cat currentStagingDBDump.sql | sed -e 's/DEFINER[ ]*=[ ]*[^*]*\*/\*/' > currentStagingDBDumpWithoutDefiner_"`date +"%d-%m-%Y"`".sql
            rm currentStagingDBDump.sql
            find -name "currentStaging*.sql" -type f -mtime +14 -delete

  create_live_db_backup:
    runs-on: ubuntu-latest
    needs:
      - parse_db_conn_live
      - parse_db_conn_staging

    steps:
      - name: Create Live DB backup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            set -a
            source /tmp/live_db_config.env
            set +a
            cd ${{ github.event.inputs.staging_directory }}
            mysqldump -u${LIVE_DB_USER} -p${LIVE_DB_PASS} ${LIVE_DB_NAME} > currentLiveDBDump.sql
            cat currentLiveDBDump.sql | sed -e 's/DEFINER[ ]*=[ ]*[^*]*\*/\*/' > currentLiveDBDumpWithoutDefiner.sql
            

  restore_live_db_backup_to_staging:
    runs-on: ubuntu-latest
    needs:
      - create_staging_db_backup
      - create_live_db_backup
    steps:
      - name: Restore Live DB Backup To Staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            set -a
            source /tmp/staging_db_config.env
            set +a
            cd ${{ github.event.inputs.staging_directory }}
            mysql -u${STAGING_DB_USER} -p${STAGING_DB_PASS} ${STAGING_DB_NAME} < currentLiveDBDumpWithoutDefiner.sql
            rm currentLiveDBDumpWithoutDefiner.sql

  change_variables_in_staging_db:
    runs-on: ubuntu-latest
    needs: restore_live_db_backup_to_staging
    steps:
      - name: Restore Live DB Backup To Staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ${{ github.event.inputs.staging_directory }}
            php -d memory_limit=3096M db-updater.php
            php -d memory_limit=3096M updatelicensekey.php

  copy_media_from_live_to_staging:
    runs-on: ubuntu-latest
    needs: restore_live_db_backup_to_staging
    steps:
      - name: Restore Live DB Backup To Staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cp -r ${{ github.event.inputs.live_directory }}/pub/media/* ${{ github.event.inputs.staging_directory }}/pub/media/

  enable_maintenance:
    runs-on: ubuntu-latest
    needs:
      - change_variables_in_staging_db
      - copy_media_from_live_to_staging
    steps:
      - name: Enable Maintenance Mode
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            echo "Enable maintenance"
            cd ${{ github.event.inputs.staging_directory }}
            php -d memory_limit=3096M bin/magento maintenance:enable

  magento_upgrade:
    runs-on: ubuntu-latest
    needs: enable_maintenance
    steps:
      - name: Run bin/magento setup:upgrade
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            echo "Run bin/magento setup:upgrade"
            cd ${{ github.event.inputs.staging_directory }}
            php -d memory_limit=3096M bin/magento setup:upgrade

  di_and_static_compile:
    runs-on: ubuntu-latest
    needs: magento_upgrade
    steps:
      - name: Run bin/magento setup:di:compile and setup:static-content:deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            echo "Run bin/magento setup:di:compile and setup:static-content:deploy"
            cd ${{ github.event.inputs.staging_directory }}
            rm -rf generated/*
            php -d memory_limit=3096M bin/magento setup:di:compile
            rm -rf pub/static/*
            php -d memory_limit=3096M bin/magento setup:static-content:deploy -f en_GB en_US

  disable_maintenance:
    runs-on: ubuntu-latest
    needs: di_and_static_compile
    steps:
      - name: Disable Maintenance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            echo "Disable maintenance mode"
            cd ${{ github.event.inputs.staging_directory }}
            php -d memory_limit=3096M bin/magento maintenance:disable
